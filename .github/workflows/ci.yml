name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  # Architectural compliance checks
  architecture-guard:
    name: Architecture Compliance
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Check for forbidden patterns
        run: |
          echo "Checking for architectural violations..."
          
          # Check for thread_local usage
          if grep -r "thread_local!" --include="*.rs" src/; then
            echo "❌ ERROR: Found thread_local! usage - violates single-threaded architecture"
            exit 1
          fi
          
          # Check for lazy_static usage
          if grep -r "lazy_static!" --include="*.rs" src/; then
            echo "❌ ERROR: Found lazy_static! usage - use Resources instead"
            exit 1
          fi
          
          # Check for RefCell usage (excluding test code)
          if grep -r "RefCell" --include="*.rs" --exclude-dir=tests src/ | grep -v "^src/tests"; then
            echo "❌ ERROR: Found RefCell usage - violates ECS patterns"
            exit 1
          fi
          
          # Check for cross-plugin imports (simplified check)
          # This checks for patterns like "use crate::systems::{other_module}::"
          # where other_module is not the current module
          if grep -r "use crate::systems::" --include="*.rs" src/plugins/ | grep -v "use crate::systems::events"; then
            echo "⚠️  WARNING: Potential cross-plugin import detected - verify it's not a violation"
            grep -r "use crate::systems::" --include="*.rs" src/plugins/ | grep -v "use crate::systems::events" || true
          fi
          
          echo "✅ Architecture compliance check passed"

  test:
    name: Test Suite
    runs-on: ${{ matrix.os }}
    needs: architecture-guard
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        rust: [stable, nightly]
    steps:
      - uses: actions/checkout@v3
      
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}
          override: true
          components: rustfmt, clippy
      
      - name: Cache cargo registry
        uses: actions/cache@v3
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
      
      - name: Cache cargo index
        uses: actions/cache@v3
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
      
      - name: Cache cargo build
        uses: actions/cache@v3
        with:
          path: target
          key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}
      
      # Install system dependencies for Bevy
      - name: Install Linux dependencies
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y libasound2-dev libudev-dev pkg-config
      
      # Run tests
      - name: Run tests
        run: cargo test --verbose
      
      # Run headless tests
      - name: Run headless tests
        run: cargo test --features ci_headless --verbose
      
      # Check code formatting
      - name: Check formatting
        run: cargo fmt -- --check
      
      # Run clippy
      - name: Run clippy
        run: cargo clippy -- -D warnings

  performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: architecture-guard
    steps:
      - uses: actions/checkout@v3
      
      - name: Install Rust stable
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
      
      - name: Install Linux dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libasound2-dev libudev-dev pkg-config
      
      - name: Run performance tests
        run: cargo test --features "ci_headless perf-tests" --release -- --nocapture
      
      - name: Upload performance results
        uses: actions/upload-artifact@v3
        with:
          name: performance-results
          path: profiles/

  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    needs: architecture-guard
    steps:
      - uses: actions/checkout@v3
      
      - name: Install Rust stable
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
      
      - name: Install Linux dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libasound2-dev libudev-dev pkg-config
      
      - name: Install tarpaulin
        run: cargo install cargo-tarpaulin
      
      - name: Generate coverage
        run: cargo tarpaulin --features ci_headless --out Xml
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          files: ./cobertura.xml

  build:
    name: Build Check
    runs-on: ${{ matrix.os }}
    needs: architecture-guard
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    steps:
      - uses: actions/checkout@v3
      
      - name: Install Rust stable
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
      
      - name: Install Linux dependencies
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y libasound2-dev libudev-dev pkg-config
      
      - name: Build project
        run: cargo build --release --verbose
      
      - name: Build with all features
        run: cargo build --release --all-features --verbose
